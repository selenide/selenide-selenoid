jar {
  manifest {
    attributes(
      "Automatic-Module-Name": project.group + '.' + project.name,
      "Implementation-Title": project.group + '.' + project.name,
      "Implementation-Version": version,
      "Implementation-Vendor": "selenide.org")
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

javadoc {
  failOnError = false
  source = sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

if (project.hasProperty("signing.keyId")) {
  apply plugin: 'signing'
  apply plugin: 'maven-publish'

  signing {
    afterEvaluate {
      sign publishing.publications.mavenJava
    }
  }

  artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
  }

  publishing {
    repositories {
      maven {
        name 'Maven'
        url project.version.endsWith("-SNAPSHOT") ?
                'https://oss.sonatype.org/content/repositories/snapshots/' :
                'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        credentials {
          username "$sonatypeUsername"
          password "$sonatypePassword"
        }
      }
    }
    publications {
      mavenJava(MavenPublication) {
        groupId "${project.group}"
        artifactId "${project.name}"

        artifact(jar)
        artifact(sourcesJar)
        artifact(javadocJar)

        pom {
          name = archivesBaseName
          description = 'Selenoid plugin for Selenide'
          url = 'https://github.com/selenide/selenide-selenoid'
          licenses {
            license {
              name = 'MIT'
              url = 'https://opensource.org/licenses/MIT'
            }
          }
          developers {
            developer {
              id = 'asolntsev'
              name = 'Andrei Solntsev'
            }
          }
          scm {
            connection = 'scm:git@github.com:selenide/selenide-selenoid.git'
            developerConnection = 'scm:git@github.com:selenide/selenide-selenoid.git'
            url = 'https://github.com/selenide/selenide-selenoid'
          }
          withXml {
            def dependenciesNode = asNode().appendNode('dependencies')

            configurations.api.allDependencies.each {
              exportDependency(dependenciesNode, it, null)
            }
            (configurations.implementation.allDependencies-configurations.api.allDependencies).each {
              exportDependency(dependenciesNode, it, 'runtime')
            }
          }
          distributionManagement {
            relocation {
              groupId = 'com.codeborne'
              artifactId = 'selenide-selenoid'
            }
          }
        }
      }
    }
  }
}

private static def exportDependency(dependenciesNode, dependency, scope) {
  def dependencyNode = dependenciesNode.appendNode('dependency')
  dependencyNode.appendNode('groupId', dependency.group)
  dependencyNode.appendNode('artifactId', dependency.name)
  dependencyNode.appendNode('version', dependency.version)
  if (scope) {
    dependencyNode.appendNode('scope', scope)
  }

  if (dependency.getExcludeRules()) {
    exclude(dependencyNode, dependency.getExcludeRules())
  }
}

private static def exclude(dependencyNode, excludeRules) {
  def exclusionsNode = dependencyNode.appendNode('exclusions')
  excludeRules.each {
    def exclusionNode = exclusionsNode.appendNode('exclusion')
    exclusionNode.appendNode('groupId', it.group)
    exclusionNode.appendNode('artifactId', it.module ?: '*')
  }
}
